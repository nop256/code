#!/usr/bin/env python3

import glob
import io
import os
import shutil
import subprocess
import sys
import time
import xml.etree.ElementTree as ET

suffix          = os.environ['STEPPER_SUFFIX']
indir           = os.environ['STEPPER_INDIR']
outdir          = os.environ['STEPPER_OUTDIR']
cmd             = os.environ['STEPPER_CMD'].split()
outname         = 'test_detail.xml'

def main() -> None:
    if os.path.exists(outname): os.remove(outname)

    # get the list of input files to process
    infiles = sorted(glob.glob(os.path.join(indir, '*.' + suffix)))

    testsuites = ET.Element('testsuites')
    suite = ET.SubElement(testsuites, 'testsuite')
    (tests, failures, disabled, skipped, errors) = (0, 0, 0, 0, 0)
    totaltime = 0.0

    prevpassed = True
    for infile in infiles:
        if not prevpassed:
            print()

        base = os.path.basename(infile)
        outfile = os.path.join(outdir, base[:-len('.' + suffix)] + '.expected')
        actualfile = os.path.join(outdir, base[:-len('.' + suffix)] + '.actual')

        # get the input
        with open(infile, 'rb') as fp:
            input = fp.read()

        # get the expected output
        with open(outfile, 'rb') as fp:
            expected = fp.read()

        # report the result in XML
        case = ET.SubElement(suite, 'testcase')
        case.set('name', infile)

        # run the program to get the actual output
        body = '$ ' + ' '.join(cmd) + ' < ' + infile
        print(body)
        body += '\n'
        start = time.time()
        proc = subprocess.Popen(cmd,
            stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (actual, stderr) = proc.communicate(input)
        seconds = time.time() - start
        with open(actualfile, 'wb') as fp:
            fp.write(actual)

        # check the output
        passed = True
        if proc.returncode != 0:
            msg = '\n!!! returned non-zero status code {}'.format(proc.returncode)
            print(msg)
            body += msg + '\n'
            passed = False

        if stderr != b'':
            msg = '\n!!! stderr should have been empty, but instead the program printed:'
            lines = stderr.split(b'\n')
            if len(lines) > 0 and lines[-1] == b'':
                lines = lines[:-1]
            for line in lines:
                msg += '\n> ' + str(line, 'utf-8')
            print(msg)
            body += msg + '\n'
            passed = False

        if actual != expected:
            msg = '\n!!! output is incorrect:\n'
            if shutil.which('icdiff') is not None:
                diff = ['icdiff', actualfile, outfile]
            else:
                diff = ['diff', actualfile, outfile]
            msg += '$ ' + ' '.join(diff) + '\n'
            proc = subprocess.Popen(diff,
                stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
            (output, errout) = proc.communicate(b'')
            if output.endswith(b'\n'):
                output = output[:-len(b'\n')]
            msg += str(output, 'utf-8')
            print(msg)
            body += msg + '\n'
            passed = False

        os.remove(actualfile)

        tests += 1
        totaltime += seconds
        case.set('time', str(time.time() - start))
        if not passed:
            failures += 1
            case.set('status', 'failed')
            failure = ET.SubElement(case, 'failure')
            failure.set('type', 'failure')
            failure.text = body

        prevpassed = passed

    suite.set('tests', str(tests))
    suite.set('failures', str(failures))
    suite.set('disabled', str(disabled))
    suite.set('skipped', str(skipped))
    suite.set('errors', str(errors))
    suite.set('time', str(totaltime))
    testsuites.set('tests', str(tests))
    testsuites.set('failures', str(failures))
    testsuites.set('disabled', str(disabled))
    testsuites.set('skipped', str(skipped))
    testsuites.set('errors', str(errors))
    testsuites.set('time', str(totaltime))

    tree = ET.ElementTree(element=testsuites)
    if os.path.exists(outname): os.remove(outname)
    tree.write('test_detail.xml', encoding='utf-8', xml_declaration=True)

    print('\nPassed {}/{} tests in {:.2} seconds'.format(tests-failures, tests, totaltime))

main()
